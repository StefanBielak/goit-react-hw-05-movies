{"version":3,"file":"static/js/311.056bf5f5.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/cast/cast.module.css?44e2","components/cast/cast.jsx","webpack://goit-react-hw-05-movies/./src/components/moviedetails/moviedetails.module.css?9533","components/moviedetails/moviedetails.jsx","webpack://goit-react-hw-05-movies/./src/components/reviews/reviews.module.css?dfbc","components/reviews/reviews.jsx","components/services/movieapi.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castContainer\":\"cast_castContainer__x7ue-\",\"castList\":\"cast_castList__UX8mR\",\"castItem\":\"cast_castItem__pxq0l\",\"actorImage\":\"cast_actorImage__8b5b9\"};","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport movieApi from '../services/movieapi';\nimport styles from './cast.module.css'; // Dodano import stylów\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const response = await movieApi.getMovieCredits(movieId);\n        setCast(response.cast);\n      } catch (error) {\n        console.error('Error fetching cast:', error);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <div className={styles.castContainer}>\n      <h2>Cast</h2>\n      <ul className={styles.castList}>\n        {cast.map((actor) => (\n          <li key={actor.id} className={styles.castItem}>\n            <img\n              src={`https://image.tmdb.org/t/p/w185${actor.profile_path}`}\n              alt={actor.name}\n              className={styles.actorImage}\n            />\n            <p>{actor.name}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"moviedetails_container__+PuMs\",\"movieDetails\":\"moviedetails_movieDetails__VGy6P\",\"moviePoster\":\"moviedetails_moviePoster__ih-iT\",\"movieInfo\":\"moviedetails_movieInfo__iWefs\",\"genres\":\"moviedetails_genres__YU65O\",\"navbar\":\"moviedetails_navbar__3nimg\",\"content\":\"moviedetails_content__kA95x\",\"additionalLinks\":\"moviedetails_additionalLinks__qN1Em\"};","import React, { useEffect, useState } from 'react';\nimport { useParams, Link, Routes, Route } from 'react-router-dom';\nimport movieApi from '../services/movieapi';\nimport styles from './moviedetails.module.css';\nimport Cast from '../cast/cast';\nimport Reviews from '../reviews/reviews';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const response = await movieApi.getMovieDetails(movieId);\n        setMovieDetails(response);\n      } catch (error) {\n        console.error('Błąd podczas pobierania szczegółów filmu:', error);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [movieId]);\n\n  return (\n    <div>\n      <div className={styles.navbar}>\n        <Link to=\"/\">Home</Link>\n      </div>\n      <div className={`${styles.container} ${styles.content}`}>\n        {movieDetails && (\n          <div className={styles.movieDetails}>\n            <div className={styles.moviePoster}>\n              <img\n                src={`https://image.tmdb.org/t/p/w780${movieDetails.poster_path}`}\n                alt={movieDetails.title}\n              />\n            </div>\n            <div className={styles.movieInfo}>\n              <h2>{movieDetails.title}</h2>\n              <p>({new Date(movieDetails.release_date).getFullYear()})</p>\n              <p>Ocena użytkowników: {movieDetails.vote_average * 10}%</p>\n              <p>{movieDetails.overview}</p>\n              <div className={styles.genres}>\n                <strong>Genre:</strong>\n                {movieDetails.genres.map((genre) => (\n                  <span key={genre.id}>{genre.name}</span>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div className={styles.additionalLinks}>\n          <Link to={`/movies/${movieId}/cast`}>Cast</Link>\n          <Link to={`/movies/${movieId}/reviews`}>Reviews</Link>\n        </div>\n\n        <Routes>\n          <Route path=\"/movies/:movieId/cast\" element={<Cast movieId={movieId} />} />\n          <Route path=\"/movies/:movieId/reviews\" element={<Reviews movieId={movieId} />} />\n        </Routes>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieDetails;","// extracted by mini-css-extract-plugin\nexport default {\"reviewsList\":\"reviews_reviewsList__LkXr4\",\"reviewItem\":\"reviews_reviewItem__+kTjt\",\"author\":\"reviews_author__KE2jH\",\"content\":\"reviews_content__mUyX9\"};","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport movieApi from '../services/movieapi';\nimport styles from './reviews.module.css'; // Dodano import stylów\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const response = await movieApi.getMovieReviews(movieId);\n        setReviews(response.results);\n      } catch (error) {\n        console.error('Error fetching reviews:', error);\n      }\n    };\n\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Reviews</h2>\n      <ul className={styles.reviewsList}>\n        {reviews.map((review) => (\n          <li key={review.id} className={styles.reviewItem}>\n            <p className={styles.author}>{review.author}</p>\n            <p className={styles.content}>{review.content}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;","const apiKey = 'fec326186e089e37ab730141e063b47b';\n\nconst movieApi = {\n  getTrendingMovies: async () => {\n    try {\n      const response = await fetch(`https://api.themoviedb.org/3/trending/movie/day?api_key=${apiKey}`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw new Error('Error fetching trending movies:', error);\n    }\n  },\n  searchMovies: async (query) => {\n    try {\n      const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${query}`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw new Error('Error searching movies:', error);\n    }\n  },\n  getMovieDetails: async (movieId) => {\n    try {\n      const response = await fetch(`https://api.themoviedb.org/3/movie/${movieId}?api_key=${apiKey}`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw new Error('Error fetching movie details:', error);\n    }\n  },\n  getMovieCredits: async (movieId) => {\n    try {\n      const response = await fetch(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${apiKey}`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw new Error('Error fetching cast:', error);\n    }\n  },\n  getMovieReviews: async (movieId) => {\n    try {\n      const response = await fetch(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${apiKey}`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw new Error('Error fetching reviews:', error);\n    }\n  },\n};\n\nexport default movieApi"],"names":["Cast","movieId","useParams","cast","setCast","useState","useEffect","async","response","movieApi","error","console","fetchCast","_jsxs","className","styles","children","_jsx","map","actor","src","concat","profile_path","alt","name","id","MovieDetails","movieDetails","setMovieDetails","fetchMovieDetails","Link","to","poster_path","title","Date","release_date","getFullYear","vote_average","overview","genres","genre","Routes","Route","path","element","Reviews","reviews","setReviews","results","fetchReviews","review","author","content","apiKey","getTrendingMovies","fetch","json","Error","searchMovies","query","getMovieDetails","getMovieCredits","getMovieReviews"],"sourceRoot":""}